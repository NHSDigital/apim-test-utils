name: Publish
on:
   push:
     branches:
       - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # This causes all history to be fetched, which is required for calculate-version to function

    - name: Install Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: upgrade pip and install poetry
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install poetry

    - name: Cache poetry packages
      uses: actions/cache@v1
      with:
        path: ~/.venv
        key: ${{ runner.os }}-build-cache-poetry-packages-${{ hashFiles('**/poetry.lock') }}

    - name: install dependencies
      run: |
        make install

    - name: Set PACKAGE_VERSION env var
      run: echo ::set-env name=PACKAGE_VERSION::$(poetry run python scripts/calculate_version.py)


    - name: set PACKAGE_VERSION, replace version and make dist
      run: |
        # remove the leading 'v'
        export PACKAGE_VERSION="$(poetry run python scripts/calculate_version.py)"
        echo ::set-env name=PACKAGE_VERSION::${PACKAGE_VERSION}
        export VERSION="$(echo ${PACKAGE_VERSION} | sed 's/v//')"
        make dist
        echo ::set-env name=WHL_FILE::$(find dist -type f -name '*.whl')
        echo ::set-env name=WHL_NAME::$(find dist -type f -name '*.whl' | sed 's#dist/##')
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    - name: create release
      id: create_release
      uses: actions/create-release@v1
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.PACKAGE_VERSION }}
        release_name: ${{ env.PACKAGE_VERSION }}

    - name: upload whl
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.WHL_FILE }}
        asset_name: ${{ env.WHL_NAME }}
        asset_content_type: application/zip