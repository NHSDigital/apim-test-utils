name: Tag
on:
   push:
     branches:
       - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # This causes all history to be fetched, which is required for calculate-version to function

    - name: Install Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: upgrade pip and install poetry
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install poetry poetry-dynamic-versioning

    - name: Cache poetry packages
      uses: actions/cache@v1
      with:
        path: ~/.venv
        key: ${{ runner.os }}-build-cache-poetry-packages-${{ hashFiles('**/poetry.lock') }}

    - name: install dependencies
      run: |
        make install

    - name: Set PACKAGE_VERSION env var
      run: echo ::set-env name=PACKAGE_VERSION::$(poetry run python scripts/calculate_version.py)
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    - name: replace version and make dist
      run: |
        # remove the leading 'v'
        export VERSION="$(echo ${PACKAGE_VERSION} | sed 's/v//')"
        sed -e "s/version = \"0.0.0\"/version = \"${VERSION}\"/" -i pyproject.toml
        sed -e "s/__version__ = \"0.0.0\"/__version__ = \"${VERSION}\"/" -i api_test_utils/__init__.py
        make dist

    - uses: actions/upload-artifact@v2
      with:
        path: dist/

    - name: create release
      id: create-release
      if: github.ref == 'refs/heads/master'
      uses: actions/create-release@v1
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.PACKAGE_VERSION }}
        release_name: ${{ env.PACKAGE_VERSION }}

